name: Test pre-commit, code and docs

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: "0 */12 * * *"
  workflow_dispatch:

jobs:
  pre-commit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
      - uses: pre-commit/action@v3.0.1

  run-ty:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version:
          - "3.11"
          - "3.13"
        os: [ubuntu-latest]
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - name: Install dependencies
        run: |
          uv sync --extra dev
      # - name: Run ty check
      #   run: uv run ty check src/kfactory --exit-zero

  test_code:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version:
          - "3.11"
          - "3.12"
          - "3.13"
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - name: Install dependencies
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release download v0.6.0 -D gds/gds_ref/ --clobber
      - name: Test with pytest
        env:
          KFACTORY_LOGFILTER_LEVEL: "ERROR"
        run: uv run -p ${{ matrix.python-version }} --extra ci --isolated pytest -s -n logical

  test_code_min_ver:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version:
          - "3.11"
          - "3.13"
        os: [ubuntu-latest, windows-latest, macos-latest]
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
      - name: Install dependencies
        env:
          GH_TOKEN: ${{ github.token }}
        run: gh release download v0.6.0 -D gds/gds_ref/ --clobber
      - name: Test with pytest
        env:
          KFACTORY_LOGFILTER_LEVEL: "ERROR"
        run: uv run -p ${{ matrix.python-version }} --extra ci --resolution lowest-direct --isolated pytest -s -n logical

  coverage:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version:
          - "3.13"
        os: [macos-latest]
    steps:
      - uses: actions/checkout@v5
      - uses: astral-sh/setup-uv@v6
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          uv sync --all-extras
      - name: Test coverage
        run: uv run -p ${{ matrix.python-version }} --extra ci --isolated pytest -n logical -s --cov=kfactory --cov-branch --cov-report=xml
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

  test_docs:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        python-version:
          - "3.13"
        os: [ubuntu-latest]

    steps:
      - uses: actions/checkout@v5
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          mamba-version: "*"
          channels: conda-forge,defaults
          channel-priority: true
          activate-environment: anaconda-client-env
      - name: Install dependencies
        run: |
          python -m pip install --user -U uv wheel
          uv pip install --system -e .[docs,ci]
          python -m ipykernel install --user --name python3
          uv sync --all-extras
      - name: Test documentation
        run: uv run -p ${{ matrix.python-version }} --extra docs --isolated mkdocs build -f docs/mkdocs.yml
