[build-system]
requires = ["setuptools>=74", "wheel", "build", "setuptools_scm[toml]>=8.1"]
build-backend = "setuptools.build_meta"

[project]
name = "kfactory"
description = "KLayout API implementation of gdsfactory"
readme = "README.md"
classifiers = [
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Operating System :: OS Independent",
]
requires-python = ">=3.10"


version = "0.23.1"
authors = [
    {name = "gdsfactory community", email = "contact@gdsfactory.com"},
]
dependencies = [
  "aenum",
  "cachetools >= 5.2.0",
  "gitpython",
  "loguru",
  "klayout >= 0.29.7",
  "pydantic >= 2.0.2, < 3",
  "pydantic-settings >= 2.0.1, < 3",
  "rectangle-packer",
  "requests",
  "ruamel.yaml.string",
  "scipy",
  "tomli",
  "toolz",
  "typer",
]

[project.optional-dependencies]

dev = [
  "kfactory[full]",
  "ruff",
  "mypy",
  "pre-commit",
  "pylsp-mypy",
  "python-lsp-server[all]",
  "types-cachetools",
  "pytest",
  "types-docutils",
  "types-Pygments",
  "types-requests",
  "types-setuptools",
  "tbump",
]
docs = [
  "kfactory[ipy]",
  "mkdocs",
  "mkdocs-jupyter>=0.24",
  "mkdocstrings[python]",
  "mkdocs-material",
  "mkdocs_gen_files",
  "mkdocs-literate-nav",
  "mkdocs-section-index",
  "mkdocs-video",
  "pymdown-extensions",
]
ci = [
  "pytest",
  "pytest_regressions",
  "types-cachetools",
  "types-requests",
  "kfactory[full]",
]
ipy = [
  "ipython",
  "ipywidgets",
  "ipytree",
  "ipyevents",
]

[project.scripts]
kf = "kfactory.cli:app"

[tool.setuptools.packages.find]
where = ["src"]

[tool.mypy]
python_version = "3.10"
strict = true
exclude = [
  "src/kfactory/widgets/interactive.py",
]
plugins = "pydantic.mypy, numpy.typing.mypy_plugin"

[tool.pylsp-mypy]
enabled = true
live_mode = true
strict = true

[tool.pytest.ini_options]
testpaths = ["src", "tests"]
addopts = '--tb=short'
norecursedirs = ["extra/*.py"]

[tool.coverage.run]
omit = "**/test_*.py"

[tool.coverage.html]
directory = "_build/coverage_html_report"

[tool.codespell]
ignore-words-list = "euclidian,TE,TE/TM,te,ba,FPR,fpr_spacing,ro,nd,donot,schem"
skip = "pyproject.toml, uv.lock"

[tool.ruff]
fix = true
line-length = 88
exclude = ["tests", "docs", "src/kfactory/widgets/interactive.py"]
indent-width = 4
target-version = "py310"

[tool.ruff.lint]
select = [
  "E",   # pycodestyle
  "F",   # pyflakes
  "UP",  # pyupgrade
  "D",   # pydocstyle
  "I",
]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"
# Like Black, indent with spaces, rather than tabs.
indent-style = "space"
# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false
# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "0.23.1"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "README.md"

[[tool.tbump.file]]
src = "pyproject.toml"

[[tool.tbump.file]]
src = "src/kfactory/__init__.py"
# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made
