[build-system]
requires = ["setuptools>=60", "wheel", "build", "setuptools_scm[toml]>=7.1"]
build-backend = "setuptools.build_meta"

[project]
name = "kfactory"
description = "KLayout API implementation of gdsfactory"
readme = "README.md"
classifiers = [
	"Programming Language :: Python :: 3.10",
	"Operating System :: OS Independent",
]
requires-python = ">=3.10"


version = "0.8.4"
authors = [
    {name = "gdsfactory community", email = "contact@gdsfactory.com"},
]
dependencies = [
	"klayout >= 0.28.10",
	"scipy",
	"ruamel.yaml",
	"cachetools >= 5.2.0",
  "pydantic >= 2.0.2, < 3",
	"pydantic-settings >= 2.0.1, < 3",
	"loguru",
	"tomli",
	"requests",
	"typer[all]",
]

[project.optional-dependencies]
git = [
	"gitpython",
]
dev = [
	"black>=23",
	"mypy",
	"pre-commit",
	"gitpython",
	"pylsp-mypy",
	"python-lsp-server[all]",
	"python-lsp-ruff",
	"types-cachetools",
	"python-lsp-black",
	"pytest",
	"kfactory[git]",
	"towncrier",
	"tbump",
	"types-requests",
]
docs = [
	"kfactory[ipy]",
  "mkdocs",
	"mkdocs-jupyter>=0.24",
  "mkdocstrings[python]",
  "mkdocs-material",
  "mkdocs_gen_files",
	"mkdocs-literate-nav",
	"mkdocs-section-index",
	"mkdocs-video",
	"pymdown-extensions",
]
ci = [
	"flake8",
	"flake8-pyproject",
	"pytest",
	"pytest_regressions",
	"mypy",
	"types-cachetools",
	"types-requests",
	"kfactory[git]",
]
ipy = [
	"ipython",
	"ipywidgets",
	"ipytree",
	"ipyevents",
]

[project.scripts]
kf = "kfactory.cli:app"

[tool.setuptools.packages.find]
where = ["src"]

[tool.black]
line-length = 88  # Specify the line length
target-version = ['py310']  # Specify your Python version
include = '\.pyi?$'
exclude = '''  # Specify the files/dirs that should be ignored by the black formatter
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | env
  | _build
  | buck-out
  | build
  | dist
)/
'''

[tool.mypy]
python_version = "3.10"
strict = true
exclude = [
	"tests",
	"src/kfactory/widgets/interactive.py",
]
plugins = "pydantic.mypy, numpy.typing.mypy_plugin"

[tool.pylsp-mypy]
enabled = true
live_mode = true
strict = true

[[tool.mypy.overrides]]
module = "kfactory"
implicit_reexport = true

[tool.isort]
multi_line_output = 3
line_length = 88
include_trailing_comma = true
skip = ["kfactory/__init__.py"]

[tool.pytest.ini_options]
testpaths = ["src", "tests"]
addopts = '--tb=short'
norecursedirs = ["extra/*.py"]

[tool.flake8]
max-line-length = 88
max-complexity = 45
select = ["B","C","E","F","W","T4","B9"]
ignore = ["E501", "E503", "E722", "W503", "W503", "E203", "B950", "B902"]

extend-ignore = ["RST303"]

exclude = [
    ".git",
    "__pycache__",
    "docs/source/conf.py",
    "build",
    "dist",
    ".ipynb_checkpoints",
    ".tox",
    "extra",
    "deprecated",
    "gdslib",
    ".tox",
    ".mypy_cache",
]

[tool.pydocstyle]
[pydocstyle]
inherit = false
match = '(?!test).*\.py'
add-ignore = ["D100","D101","D102","D103","D104","D203","D405","D417"]
convention = "google"


[tool.doc8]
ignore-path=["docs/build/html","docs/notebooks/build","cache"]
max-line-length=99
verbose=1
ignore-path-errors="/tmp/other_thing.rst;D001;D002"

[tool.yapf]
based_on_style = "google"
allow_multiline_lambdas = true

[tool.coverage.run]
omit = "**/test_*.py"

[tool.coverage.html]
directory = "_build/coverage_html_report"

[tool.codespell]
ignore-words-list = "euclidian,TE,TE/TM,te,ba,FPR,fpr_spacing,ro,nd,donot,schem"
skip = "pyproject.toml"

[tool.ruff]
line-length = 88
src = ["src"]
select = [
  "E",   # pycodestyle
  "F",   # pyflakes
  "UP",  # pyupgrade
  "D",   # pydocstyle
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.towncrier]
directory = "changelog.d"
filename = "CHANGELOG.md"
start_string = "<!-- towncrier release notes start -->\n"
underlines = ["", "", ""]
template = "changelog.d/changelog_template.jinja"
title_format = "## [{version}](https://github.com/gdsfactory/kfactory/tree/{version}) - {project_date}"
issue_format = "[#{issue}](https://github.com/gdsfactory/kfactory/issues/{issue})"

[[tool.towncrier.type]]
directory = "security"
name = "Security"
showcontent = true

[[tool.towncrier.type]]
directory = "removed"
name = "Removed"
showcontent = true

[[tool.towncrier.type]]
directory = "deprecated"
name = "Deprecated"
showcontent = true

[[tool.towncrier.type]]
directory = "added"
name = "Added"
showcontent = true

[[tool.towncrier.type]]
directory = "changed"
name = "Changed"
showcontent = true

[[tool.towncrier.type]]
directory = "fixed"
name = "Fixed"
showcontent = true


[tool.tbump]
# Uncomment this if your project is hosted on GitHub:
# github_url = "https://github.com/<user or organization>/<project>/"

[tool.tbump.version]
current = "0.8.4"

# Example of a semver regexp.
# Make sure this matches current_version before
# using tbump
regex = '''
  (?P<major>\d+)
  \.
  (?P<minor>\d+)
  \.
  (?P<patch>\d+)
  '''

[tool.tbump.git]
message_template = "Bump to {new_version}"
tag_template = "v{new_version}"

# For each file to patch, add a [[file]] config
# section containing the path of the file, relative to the
# tbump.toml location.
[[tool.tbump.file]]
src = "README.md"

[[tool.tbump.file]]
src = "pyproject.toml"

[[tool.tbump.file]]
src = "src/kfactory/__init__.py"
# You can specify a list of commands to
# run after the files have been patched
# and before the git commit is made

[[tool.tbump.before_commit]]
name = "create & check changelog"
cmd = "towncrier build --yes --version {new_version}"

[[tool.tbump.before_commit]]
name = "create & check changelog"
cmd = "git add CHANGELOG.md"

[[tool.tbump.before_commit]]
name = "create & check changelog"
cmd = "grep -q -F {new_version} CHANGELOG.md"
